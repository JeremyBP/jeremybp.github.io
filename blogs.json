{"status":"ok","feed":{"url":"https://medium.com/feed/@jeremybp","title":"Stories by JeremyBP on Medium","link":"https://medium.com/@jeremybp?source=rss-278157eec3f4------2","author":"","description":"Stories by JeremyBP on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*XrGw4sRAf7z_iB9N39MGUg.png"},"items":[{"title":"StarCellar E01: Getting Started with Apizr","pubDate":"2024-12-03 11:01:31","link":"https://medium.com/@jeremybp/starcellar-e01-getting-started-with-apizr-47509b9f3876?source=rss-278157eec3f4------2","guid":"https://medium.com/p/47509b9f3876","author":"JeremyBP","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*1AbNK8TpxUMiDAGm.gif\"></figure><p>4 years and counting between Apizr v1 and its latest\u00a0v6.4.</p>\n<p>This resilient Refit manager has been developped and maintained for my own needs, but open sourced and published on NuGet for free from the begining.</p>\n<p>That said, I did not took the time to show how to use each and every features of it, so that\u2019s what I\u2019m trying to do now by creating this\u00a0series.</p>\n<p>I\u2019ll build a MAUI sample app called StarCellar to manage a wine cellar (I\u2019m french after all \ud83d\ude42 ), both with and without Apizr to show what\u2019s different while requesting a minimal\u00a0API.</p>\n<p>So let\u2019s get\u00a0started!</p>\n<p>If you\u2019re new to Apizr, you shoud know that it\u2019s based on Refit and aims to provide many more features on top of it, like retry handling, connectivity check, cache management, authentication handling, priority management, and so on\u2026 It\u2019s here to help me to don\u2019t repeat myself into each and every projects while dealing with api request calls and resilience needs.</p>\n<p>Get the big picture by reading the documentation:</p>\n<figure><a href=\"https://apizr.net/\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/196/0*9ppc8kuIeu5hLrFV\"></a></figure><p>Feel free to browse code, tests and samples and maybe to submit PRs or\u00a0ideas:</p>\n<figure><a href=\"https://github.com/Respawnsive/Apizr\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/192/0*fOswmWd5yM_5k8wd\"></a></figure><p>Don\u2019t forget the YouTube Channel Playlist about\u00a0Apizr:</p>\n<figure><a href=\"https://www.youtube.com/playlist?list=PLP7ES6CZYy_3zYjmOJzi3K_GZlViorgUO\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/106/0*lg2Wn2DgN15jDppN\"></a></figure><h4>The starcellar series</h4>\n<p>The StarCellar walkthrough series is built thanks to multiple episodes, each with a dedicated source code branch, blog post and playlist\u00a0video.</p>\n<p>Feel free to fork the project and start from the main branch, so that you could follow this tutorial coding by yourself. If you do so, don\u2019t forget to run the API through a Dev Tunnel and to update the MAUI app\u2019s base\u00a0address.</p>\n<a href=\"https://medium.com/media/e78f4b37dcfc41431aabf279678c44cf/href\">https://medium.com/media/e78f4b37dcfc41431aabf279678c44cf/href</a><h4>The starcellar episode\u00a001</h4>\n<p>The current episode is covered by this\u00a0video:</p>\n<a href=\"https://medium.com/media/a06be133958ee4f9126a7fce216976f9/href\">https://medium.com/media/a06be133958ee4f9126a7fce216976f9/href</a><h4><strong>The application</strong></h4>\n<p>Like I said, there\u2019s a minimal backend API project and 2 MAUI projects:</p>\n<ul>\n<li>\n<strong>StarCellar.Api:</strong> Minimal backend API offering wine bottle CRUDing, file management and authentication</li>\n<li>\n<strong>StarCellar.Without.Apizr:</strong> MAUI app to manage the cellar without using Apizr but Refit with 3rd part\u00a0libs</li>\n<li>\n<strong>StarCellar.With.Apizr:</strong> MAUI app to manage the cellar by using Apizr with integrated libs</li>\n</ul>\n<p>The MAUI app is quite simple with features\u00a0like:</p>\n<ul>\n<li>Show all wines from the cellar in a list\u00a0view</li>\n<li>Show more infos about the selected wine in a details\u00a0view</li>\n<li>Change wine infos in a edit view (image, title, description and\u00a0score)</li>\n<li>Add a new wine to the cellar in the edit\u00a0view</li>\n</ul>\n<p>For this Getting Started episode, both <em>With</em> and <em>Without</em> projects are yet configured and functional with just Refit in place, so I\u2019ll work on the <em>With</em> project\u00a0only.</p>\n<h4>Installing apizr</h4>\n<p>Start by removing the <strong>Refit</strong> package from the <em>With</em> project and install the <strong>Apizr.Extensions.Microsoft.DependencyInjection</strong> one\u00a0instead.</p>\n<p>Setting base address by attribute</p>\n<p>Open the <strong>ICellarApi </strong>interface from <em>Services &gt; Apis &gt; Cellar</em>\u00a0folder.</p>\n<p>Add a <strong>BaseAddress </strong>attribute over the interface with <strong>Constants.BaseAddress</strong> as parameter.</p>\n<p>Repeat the operation with the <strong>IFileApi</strong>.</p>\n<h4>Registering Apizr</h4>\n<p>Into <strong>MauiProgram</strong><em>:</em></p>\n<ul><li>Replace folowing former <strong>Refit</strong> registration block:</li></ul>\n<pre>builder.Services.AddRefitClient&lt;ICellarApi&gt;() <br>    .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(Constants.BaseAddress)); <br><br>builder.Services.AddRefitClient&lt;IFileApi&gt;() <br>    .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(Constants.BaseAddress));</pre>\n<p>by the <strong>Apizr</strong>\u00a0one:</p>\n<pre>builder.Services.AddApizrManagerFor&lt;ICellarApi&gt;();<br>builder.Services.AddApizrManagerFor&lt;IFileApi&gt;();</pre>\n<p><strong>Using Apizr managers from ViewModels</strong></p>\n<p>Now the managers are registered, let\u2019s use it from our ViewModels.</p>\n<p>Open all ViewModels from <em>ViewModels </em>folder.</p>\n<p>Inject <strong>IApizrManager&lt;ICellarApi&gt; _cellarApiManager</strong> instead of <strong>ICellarApi _cellarApi</strong> into all ViewModel\u2019s constructors.</p>\n<p>Now use the managed\u00a0api!</p>\n<ul><li>Replace call:</li></ul>\n<pre>_cellarApi.GetWinesAsync();</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.GetWinesAsync());</pre>\n<ul><li>Then replace\u00a0call:</li></ul>\n<pre>_cellarApi.DeleteWineAsync(Wine.Id);</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.DeleteWineAsync(Wine.Id));</pre>\n<ul><li>Then replace\u00a0call:</li></ul>\n<pre>_cellarApi.CreateWineAsync(Wine);</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.CreateWineAsync(Wine));</pre>\n<ul><li>Finaly replace\u00a0call:</li></ul>\n<pre>_cellarApi.UpdateWineAsync(Wine.Id, Wine);</pre>\n<p>by the managed\u00a0on:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.UpdateWineAsync(Wine.Id, Wine));</pre>\n<p>We also have to manage the file api, so inject <strong>IApizrManager&lt;IFileApi&gt; _fileApiManager</strong> instead of <strong>IFileApi _fileApi</strong> into WineEditViewModel\u2019s constructor.</p>\n<ul><li>Then replace\u00a0call:</li></ul>\n<pre>_fileApi.UploadAsync(streamPart);</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_fileApiManager.ExecuteAsync(api =&gt; api.UploadAsync(streamPart));</pre>\n<p>And we\u2019re\u00a0good!</p>\n<p>All calls will be managed by Apizr, so here in this example, Apizr will set the base address by\u00a0design.</p>\n<h4>Running the\u00a0app</h4>\n<p>Nothing\u2019s changed on the user experience point of view. The same app, but with requests managed by\u00a0Apizr:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/411/0*eehffyYnO0-qBTdD.gif\"></figure><h4>Get more of\u00a0it</h4>\n<p>Feel free to ask me anything on twitter, or opening a discussion, issue or PR on\u00a0GitHub.</p>\n<p>Again, it\u2019s basically all built for my own use and motivated by my needs. But it\u2019s live on Nuget and opened to all so feel free to contribute.</p>\n<p>Apizr brings many more features so you should head to the next episode to continue your walkthrough path.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=47509b9f3876\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*1AbNK8TpxUMiDAGm.gif\"></figure><p>4 years and counting between Apizr v1 and its latest\u00a0v6.4.</p>\n<p>This resilient Refit manager has been developped and maintained for my own needs, but open sourced and published on NuGet for free from the begining.</p>\n<p>That said, I did not took the time to show how to use each and every features of it, so that\u2019s what I\u2019m trying to do now by creating this\u00a0series.</p>\n<p>I\u2019ll build a MAUI sample app called StarCellar to manage a wine cellar (I\u2019m french after all \ud83d\ude42 ), both with and without Apizr to show what\u2019s different while requesting a minimal\u00a0API.</p>\n<p>So let\u2019s get\u00a0started!</p>\n<p>If you\u2019re new to Apizr, you shoud know that it\u2019s based on Refit and aims to provide many more features on top of it, like retry handling, connectivity check, cache management, authentication handling, priority management, and so on\u2026 It\u2019s here to help me to don\u2019t repeat myself into each and every projects while dealing with api request calls and resilience needs.</p>\n<p>Get the big picture by reading the documentation:</p>\n<figure><a href=\"https://apizr.net/\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/196/0*9ppc8kuIeu5hLrFV\"></a></figure><p>Feel free to browse code, tests and samples and maybe to submit PRs or\u00a0ideas:</p>\n<figure><a href=\"https://github.com/Respawnsive/Apizr\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/192/0*fOswmWd5yM_5k8wd\"></a></figure><p>Don\u2019t forget the YouTube Channel Playlist about\u00a0Apizr:</p>\n<figure><a href=\"https://www.youtube.com/playlist?list=PLP7ES6CZYy_3zYjmOJzi3K_GZlViorgUO\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/106/0*lg2Wn2DgN15jDppN\"></a></figure><h4>The starcellar series</h4>\n<p>The StarCellar walkthrough series is built thanks to multiple episodes, each with a dedicated source code branch, blog post and playlist\u00a0video.</p>\n<p>Feel free to fork the project and start from the main branch, so that you could follow this tutorial coding by yourself. If you do so, don\u2019t forget to run the API through a Dev Tunnel and to update the MAUI app\u2019s base\u00a0address.</p>\n<a href=\"https://medium.com/media/e78f4b37dcfc41431aabf279678c44cf/href\">https://medium.com/media/e78f4b37dcfc41431aabf279678c44cf/href</a><h4>The starcellar episode\u00a001</h4>\n<p>The current episode is covered by this\u00a0video:</p>\n<a href=\"https://medium.com/media/a06be133958ee4f9126a7fce216976f9/href\">https://medium.com/media/a06be133958ee4f9126a7fce216976f9/href</a><h4><strong>The application</strong></h4>\n<p>Like I said, there\u2019s a minimal backend API project and 2 MAUI projects:</p>\n<ul>\n<li>\n<strong>StarCellar.Api:</strong> Minimal backend API offering wine bottle CRUDing, file management and authentication</li>\n<li>\n<strong>StarCellar.Without.Apizr:</strong> MAUI app to manage the cellar without using Apizr but Refit with 3rd part\u00a0libs</li>\n<li>\n<strong>StarCellar.With.Apizr:</strong> MAUI app to manage the cellar by using Apizr with integrated libs</li>\n</ul>\n<p>The MAUI app is quite simple with features\u00a0like:</p>\n<ul>\n<li>Show all wines from the cellar in a list\u00a0view</li>\n<li>Show more infos about the selected wine in a details\u00a0view</li>\n<li>Change wine infos in a edit view (image, title, description and\u00a0score)</li>\n<li>Add a new wine to the cellar in the edit\u00a0view</li>\n</ul>\n<p>For this Getting Started episode, both <em>With</em> and <em>Without</em> projects are yet configured and functional with just Refit in place, so I\u2019ll work on the <em>With</em> project\u00a0only.</p>\n<h4>Installing apizr</h4>\n<p>Start by removing the <strong>Refit</strong> package from the <em>With</em> project and install the <strong>Apizr.Extensions.Microsoft.DependencyInjection</strong> one\u00a0instead.</p>\n<p>Setting base address by attribute</p>\n<p>Open the <strong>ICellarApi </strong>interface from <em>Services &gt; Apis &gt; Cellar</em>\u00a0folder.</p>\n<p>Add a <strong>BaseAddress </strong>attribute over the interface with <strong>Constants.BaseAddress</strong> as parameter.</p>\n<p>Repeat the operation with the <strong>IFileApi</strong>.</p>\n<h4>Registering Apizr</h4>\n<p>Into <strong>MauiProgram</strong><em>:</em></p>\n<ul><li>Replace folowing former <strong>Refit</strong> registration block:</li></ul>\n<pre>builder.Services.AddRefitClient&lt;ICellarApi&gt;() <br>    .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(Constants.BaseAddress)); <br><br>builder.Services.AddRefitClient&lt;IFileApi&gt;() <br>    .ConfigureHttpClient(c =&gt; c.BaseAddress = new Uri(Constants.BaseAddress));</pre>\n<p>by the <strong>Apizr</strong>\u00a0one:</p>\n<pre>builder.Services.AddApizrManagerFor&lt;ICellarApi&gt;();<br>builder.Services.AddApizrManagerFor&lt;IFileApi&gt;();</pre>\n<p><strong>Using Apizr managers from ViewModels</strong></p>\n<p>Now the managers are registered, let\u2019s use it from our ViewModels.</p>\n<p>Open all ViewModels from <em>ViewModels </em>folder.</p>\n<p>Inject <strong>IApizrManager&lt;ICellarApi&gt; _cellarApiManager</strong> instead of <strong>ICellarApi _cellarApi</strong> into all ViewModel\u2019s constructors.</p>\n<p>Now use the managed\u00a0api!</p>\n<ul><li>Replace call:</li></ul>\n<pre>_cellarApi.GetWinesAsync();</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.GetWinesAsync());</pre>\n<ul><li>Then replace\u00a0call:</li></ul>\n<pre>_cellarApi.DeleteWineAsync(Wine.Id);</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.DeleteWineAsync(Wine.Id));</pre>\n<ul><li>Then replace\u00a0call:</li></ul>\n<pre>_cellarApi.CreateWineAsync(Wine);</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.CreateWineAsync(Wine));</pre>\n<ul><li>Finaly replace\u00a0call:</li></ul>\n<pre>_cellarApi.UpdateWineAsync(Wine.Id, Wine);</pre>\n<p>by the managed\u00a0on:</p>\n<pre>_cellarApiManager.ExecuteAsync(api =&gt; api.UpdateWineAsync(Wine.Id, Wine));</pre>\n<p>We also have to manage the file api, so inject <strong>IApizrManager&lt;IFileApi&gt; _fileApiManager</strong> instead of <strong>IFileApi _fileApi</strong> into WineEditViewModel\u2019s constructor.</p>\n<ul><li>Then replace\u00a0call:</li></ul>\n<pre>_fileApi.UploadAsync(streamPart);</pre>\n<p>by the managed\u00a0one:</p>\n<pre>_fileApiManager.ExecuteAsync(api =&gt; api.UploadAsync(streamPart));</pre>\n<p>And we\u2019re\u00a0good!</p>\n<p>All calls will be managed by Apizr, so here in this example, Apizr will set the base address by\u00a0design.</p>\n<h4>Running the\u00a0app</h4>\n<p>Nothing\u2019s changed on the user experience point of view. The same app, but with requests managed by\u00a0Apizr:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/411/0*eehffyYnO0-qBTdD.gif\"></figure><h4>Get more of\u00a0it</h4>\n<p>Feel free to ask me anything on twitter, or opening a discussion, issue or PR on\u00a0GitHub.</p>\n<p>Again, it\u2019s basically all built for my own use and motivated by my needs. But it\u2019s live on Nuget and opened to all so feel free to contribute.</p>\n<p>Apizr brings many more features so you should head to the next episode to continue your walkthrough path.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=47509b9f3876\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["refit","apizr","dotnet","rest-api"]}]}